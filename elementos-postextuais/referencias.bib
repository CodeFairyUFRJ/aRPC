
@article{sill_design_2016,
	title = {The {Design} and {Architecture} of {Microservices}},
	volume = {3},
	issn = {2325-6095},
	url = {http://ieeexplore.ieee.org/document/7742259/},
	doi = {10.1109/MCC.2016.111},
	number = {5},
	urldate = {2021-03-30},
	journal = {IEEE Cloud Computing},
	author = {Sill, Alan},
	month = sep,
	year = {2016},
	pages = {76--80},
	file = {Sill - 2016 - The Design and Architecture of Microservices.pdf:/home/ericson/Zotero/storage/TK74MYG2/Sill - 2016 - The Design and Architecture of Microservices.pdf:application/pdf},
}

@inproceedings{hiltunen_constructing_1995,
	address = {Vancouver, BC, Canada},
	title = {Constructing a configurable group {RPC} service},
	isbn = {978-0-8186-7025-1},
	url = {http://ieeexplore.ieee.org/document/500031/},
	doi = {10.1109/ICDCS.1995.500031},
	urldate = {2021-03-30},
	booktitle = {Proceedings of 15th {International} {Conference} on {Distributed} {Computing} {Systems}},
	publisher = {IEEE Comput. Soc. Press},
	author = {Hiltunen, M.A. and Schlichting, R.D.},
	year = {1995},
	pages = {288--295},
	file = {Hiltunen and Schlichting - 1995 - Constructing a configurable group RPC service.pdf:/home/ericson/Zotero/storage/HA9A7GP2/Hiltunen and Schlichting - 1995 - Constructing a configurable group RPC service.pdf:application/pdf},
}

@inproceedings{sefid-dashti_toward_2016,
	address = {Beirut, Lebanon},
	title = {Toward extending apache thrift open source to alleviate {SOAP} service consumption},
	isbn = {978-1-5090-4580-8},
	url = {http://ieeexplore.ieee.org/document/7863681/},
	doi = {10.1109/OSSCOM.2016.7863681},
	urldate = {2021-03-30},
	booktitle = {2016 2nd {International} {Conference} on {Open} {Source} {Software} {Computing} ({OSSCOM})},
	publisher = {IEEE},
	author = {Sefid-Dashti, Behrouz and Babamir, Seyed Morteza},
	month = dec,
	year = {2016},
	pages = {1--6},
	file = {Sefid-Dashti and Babamir - 2016 - Toward extending apache thrift open source to alle.pdf:/home/ericson/Zotero/storage/6CUYQPPA/Sefid-Dashti and Babamir - 2016 - Toward extending apache thrift open source to alle.pdf:application/pdf},
}

@misc{gonzalez_building_nodate,
	title = {Building {Microservice} {APIs} {Using} {GRPC}},
	abstract = {Microservices architecture frameworks have been developed by the community of software engineers to solve some of the problems supporting the client-server model. G Remote Procedure Calls (GRPC) is a microservice framework which uses the new HyperText Transfer Protocol version 2 (HTTP2) to support many different clients such as desktops, browsers, mobile devices, etc., and handle communications between them and the servers in an efficient manner. GRPC gives opportunity to use protobuffers which offer maintainability and scalability features by defining services and messages. The protofiles can then be transpiled from the proto language to the specific programming language implementation of the applications. One of the benefits gained in using protobuffers is the client applications are able to find errors within its source code in compile instead of runtime, raising its stability factor. In addition, GRPC offers many different channels of communication between the server and clients, such as Simple RPC, Server-side Streaming RPC, Client-Side Streaming RPC, and Bidirectional RPC, and each have their purpose to solve specific use cases. We demonstrate each channel in a fictitious forum application to help explain their functionality. GRPC also offers error handling between the channels to ensure clients can follow a standard. In addition, GRPC also offer the capability to pass authentication information between client and server within the message. We look at GRPC as a microservice framework to help support the multitude of client applications written in many different programming languages and still maintain a stable line of communication with the server.},
	language = {en\_US},
	author = {Gonzalez, Ismael},
	note = {Publisher: California State University, Northridge},
	keywords = {API, Client, Dissertations, Academic -- CSUN -- Computer Science., Google, GRPC, Java, Microservice, REST, Server, SOAP, Webservice},
	file = {Gonzalez - Building Microservice APIs Using GRPC.pdf:/home/ericson/Zotero/storage/HWKW4982/Gonzalez - Building Microservice APIs Using GRPC.pdf:application/pdf},
}

@article{wang_grpc_1993,
	title = {{GRPC}: a communication cooperation mechanism in distributed systems},
	volume = {27},
	issn = {0163-5980},
	shorttitle = {{GRPC}},
	url = {https://doi.org/10.1145/155870.155881},
	doi = {10.1145/155870.155881},
	abstract = {RPC (Remote Procedure Call) is very popular in distributed application design. However, most existing RPC systems have some defects on parallelism and reliability and transparency, they can only support point-to-point and(or) broadcast communication. We try to bring the process group concept into RPC systems and present a new kind of communication cooperation mechanism supporting the cooperation among distributed entities in distributed systems. We call it GRPC(Group Remote Procedure Call) mechanism. According to different application background, the related GRPC mechanism are named lookup, function-convergence and update GRPC. The prototype systems of these three specific classes of GRPC mechanisms have been implemented in the local area network which consists of SUN 4 workstations. The performance evaluation on these prototype systems has been made. Practice has shown: the GRPC mechanism can not only improve the parallelism, reliability and transparency of RPC systems, but also enable RPC systems to support group communication.},
	number = {3},
	urldate = {2021-03-30},
	journal = {ACM SIGOPS Operating Systems Review},
	author = {Wang, Xingwei and Zhao, Hong and Zhu, Jiakeng},
	month = jul,
	year = {1993},
	pages = {75--86},
	file = {Wang et al. - 1993 - GRPC a communication cooperation mechanism in dis.pdf:/home/ericson/Zotero/storage/B4C5HA6Y/Wang et al. - 1993 - GRPC a communication cooperation mechanism in dis.pdf:application/pdf},
}

@article{madani_re-implementing_2016,
	title = {Re-implementing {Apache} {Thrift} using model-driven engineering technologies : {An} experience report},
	copyright = {unspecified},
	issn = {1613-0073},
	shorttitle = {Re-implementing {Apache} {Thrift} using model-driven engineering technologies},
	url = {http://eprints.whiterose.ac.uk/133820/},
	abstract = {In this paper we investigate how contemporary model-driven engineering technologies such as Xtext, EMF and Epsilon compare against mainstream techniques and tools (C++, flex and Bison) for the development of a complex textual modelling language and family of supporting code generators (Apache Thrift). Our preliminary results indicate that the MDE-based implementation delivers significant benefits in term of conciseness, coupling and cohesion.},
	language = {en},
	urldate = {2021-03-30},
	journal = {CEUR Workshop Proceedings 1403},
	author = {Madani, Sina and Kolovos, Dimitrios S.},
	month = oct,
	year = {2016},
	note = {Num Pages: 8
Publisher: York},
	pages = {149--156},
	file = {Full Text PDF:/home/ericson/Zotero/storage/Q9HWQYZP/Madani and Kolovos - 2016 - Re-implementing Apache Thrift using model-driven e.pdf:application/pdf},
}

@article{tu_implementing_nodate,
	title = {Implementing {Replication} for {Predictability} within {Apache} {Thrift}},
	abstract = {Interactive applications, such as search, social networking and retail, hosted in cloud data center generate large quantities of small workloads that require extremely low median and tail latency in order to provide soft real-time performance to users. These small workloads are known as short TCP flows. However, these short TCP flows experience long latencies due in part to large workloads consuming most available buffer in the switches. Imperfect routing algorithm such as ECMP makes the matter even worse. We propose a transport mechanism using replication for predictability to achieve low flow completion time (FCT) for short TCP flows. We implement replication for predictability within Apache Thrift transport layer that replicates each short TCP flow and sends out identical packets for both flows, then utilizes the first flow that finishes the transfer. Our results show that by using replication for predictability for short TCP flows, we can reduce median FCT by 15\% and tail FCT by 20\%. When integrated with Cassandra, we can also improve the performance of Read operation with flow replication.},
	language = {en},
	author = {Tu, Jianwei},
	pages = {5},
	file = {Tu - Implementing Replication for Predictability within.pdf:/home/ericson/Zotero/storage/2B3HJA35/Tu - Implementing Replication for Predictability within.pdf:application/pdf},
}

@inproceedings{araujo_performance_2020,
	address = {Canc√∫n, Mexico},
	series = {{meProc}. of the 8th {International} {Workshop} on {ADVANCEs} in {ICT} {Infrastructures} and {Services} ({ADVANCE} 2020)},
	title = {Performance analysis of computational offloading on embedded platforms using the {gRPC} framework},
	url = {https://hal.archives-ouvertes.fr/hal-02495252},
	abstract = {Embedded systems are becoming increasingly accessible to the Internet allowing the creation of new services and applications. Such systems need to communicate in a struc-tured form in a way that uses standardized technologies for better results. Mobile systems also have a number of limited features like battery life, internal storage and processing performance. Such restrictions can be mitigated by the use of computational offloading since algorithms or applications can be executed in the cloud or other networked devices. This article is intended for the analysis of emerging technologies in cross-process communication between Linux and Android-based multiplatforms using the gRPC framework. Applications have been developed in various object-oriented programming languages for performing remote procedure calls between a single-board computer and a personal-use smartphone for processing higher order arrays and applying filters to images. Then, a series of analyzes were performed on the transferred data and the computational offloading performance of the algorithms in each platform.},
	urldate = {2021-03-30},
	booktitle = {8th {International} {Workshop} on {ADVANCEs} in {ICT} {Infrastructures} and {Services} ({ADVANCE} 2020)},
	publisher = {Candy E. Sansores, Universidad del Caribe, Mexico, Nazim Agoulmine, IBISC Lab, University of Evry - Paris-Saclay University},
	author = {Ara√∫jo, Mateus and Maia, Marcio E F and Rego, Paulo A. L. and De Souza, Jose N},
	editor = {Mena, Francisco Moo and Yucatan, Universidade Autonoma De and {Mexico} and Duarte, Elias and Parana, Federal University of and {Brazil}},
	month = jan,
	year = {2020},
	pages = {1--8},
	file = {HAL PDF Full Text:/home/ericson/Zotero/storage/MJP4CRHB/Ara√∫jo et al. - 2020 - Performance analysis of computational offloading o.pdf:application/pdf},
}

@inproceedings{bagci_lightweight_2016,
	address = {Lisbon, Portugal},
	title = {A {Lightweight} and {High} {Performance} {Remote} {Procedure} {Call} {Framework} for {Cross} {Platform} {Communication}:},
	isbn = {978-989-758-194-6},
	shorttitle = {A {Lightweight} and {High} {Performance} {Remote} {Procedure} {Call} {Framework} for {Cross} {Platform} {Communication}},
	url = {http://www.scitepress.org/DigitalLibrary/Link.aspx?doi=10.5220/0005931201170124},
	doi = {10.5220/0005931201170124},
	abstract = {Remote Procedure Call, High Performance Computing, Cross Platform Communication.},
	language = {en},
	urldate = {2021-03-30},
	booktitle = {Proceedings of the 11th {International} {Joint} {Conference} on {Software} {Technologies}},
	publisher = {SCITEPRESS - Science and Technology Publications},
	author = {Bagci, Hakan and Kara, Ahmet},
	year = {2016},
	pages = {117--124},
	file = {Bagci e Kara - 2016 - A Lightweight and High Performance Remote Procedur.pdf:/home/ericson/Zotero/storage/B379XXSG/Bagci e Kara - 2016 - A Lightweight and High Performance Remote Procedur.pdf:application/pdf},
}

@inproceedings{chamas_comparing_2017,
	title = {Comparing {REST}, {SOAP}, {Socket} and {gRPC} in computation offloading of mobile applications: {An} energy cost analysis},
	shorttitle = {Comparing {REST}, {SOAP}, {Socket} and {gRPC} in computation offloading of mobile applications},
	doi = {10.1109/LATINCOM.2017.8240185},
	abstract = {There has been a high concern regarding the energy saving on mobile devices recently, for mobile devices have been performing increasingly complex tasks over time. The computation offloading is one of the most popular techniques used by developers as an effective way of saving energy on mobile devices, which consists on executing complex tasks in external servers with different purposes including save energy. Deciding towards offloading certain tasks requires to understand the influence of the amount of data, amount of computation, and the network profile. Several studies have investigated the influence of different wireless flavours, such as 3G, 4G and wifi, but no study has investigated the influence of the communication choices on the energy cost. Therefore, in this paper, we present an experiment we conducted to evaluate the energy consumption of different communication protocols and architectural styles, namely REST, SOAP, Socket and gRPC, when executing algorithms of different complexities and different input sizes and types. Results show that local execution is more economic with less complex algorithms and small input data. When it comes to remote execution, REST is the most economic choice followed by Socket. Moreover, our data show that computation offloading can save up to 10 time as much energy when compared to local execution for some executions configurations.},
	booktitle = {2017 {IEEE} 9th {Latin}-{American} {Conference} on {Communications} ({LATINCOM})},
	author = {Chamas, C. L. and Cordeiro, D. and Eler, M. M.},
	month = nov,
	year = {2017},
	keywords = {Batteries, Energy consumption, Mobile handsets, Servers, Sockets, Sorting},
	pages = {1--6},
	file = {Chamas et al. - 2017 - Comparing REST, SOAP, Socket and gRPC in computati.pdf:/home/ericson/Zotero/storage/3Z8PDCNM/Chamas et al. - 2017 - Comparing REST, SOAP, Socket and gRPC in computati.pdf:application/pdf},
}

@article{nguyen_benchmarking_2016,
	title = {Benchmarking {Performance} of {Data} {Serialization} and {RPC} {Frameworks} in {Microservices} {Architecture}: {gRPC} vs. {Apache} {Thrift} vs. {Apache} {Avro}},
	copyright = {closedAccess},
	shorttitle = {Benchmarking {Performance} of {Data} {Serialization} and {RPC} {Frameworks} in {Microservices} {Architecture}},
	url = {https://aaltodoc.aalto.fi:443/handle/123456789/23386},
	abstract = {Microservices Architecture is becoming an prominent standard when it comes to designing high-level architecture of complex applications. Each microservice addresses one small part of the application with very specific functionalities for very specific business requirements. With such limited scope, it can be deployed as a standalone service. Different microservices in the same system can be written in different programming languages, depending on the tasks they need to accomplish. Despite its popularity, microservices architecture also has challenging issues and communication between the microservices is one of those. RPC has been universally adopted in large distributed software systems with the client-server model of computing and is suitable for use in microservices architecture. IDT Messaging Oy‚Äôs MagicWords system consists of several microservices written in Java and Python and uses MsgPack RPC to facilitate inter-services communication. However, MsgPack is outdated, not widely adopted and hence lacks continuous updates, bug fixes, as well as community support. The goal of this thesis is to investigate which RPC framework I should implement to replace MsgPack. 
 
I choose three popular open-source data serialization and RPC frameworks for my investigation, they are gRPC, Apache Thrift, and Avro. I perform extensive benchmarking tests to evaluate their performance in terms of message serialization and end-to-end communication for both Java and Python implementations. The execution time, CPU usage and memory usage are recorded. I then analyze the performance results as well as the implementation style of each framework. The performance of gRPC even though is not the best in all scenarios, it is in general very good. Furthermore, gRPC has comprehensive documentation, follows modern style, and is still actively developed and therefore the conclusion is to adopt gRPC for MagicWords.},
	language = {en},
	urldate = {2021-03-30},
	author = {Nguyen, Thuy},
	month = oct,
	year = {2016},
	note = {Accepted: 2016-11-02T09:48:08Z},
}

@inproceedings{anvari_thrift_2018,
	address = {New York, NY, USA},
	series = {{SCIOT} '18},
	title = {Thrift {Service} {Composition}: {Toward} {Extending} {BPEL}},
	isbn = {978-1-4503-6532-1},
	shorttitle = {Thrift {Service} {Composition}},
	url = {https://doi.org/10.1145/3269961.3269973},
	doi = {10.1145/3269961.3269973},
	abstract = {Today, there are more than 7 billion connected devices including resource-constrained devices which are capable of participating in service collaborations. Service Oriented Architecture (SOA) is prominent as a result of loose coupling and platform independence, not to mention the business-IT alignment of service-oriented solutions. Also, loose coupling and platform independence match mobile device connection intermittence and platform diversity, respectively. Concerns about implementation arise as a result of the resource constraints of mobile devices. Besides, service composition plays a crucial role in the achievement of business-IT alignment by service-oriented solutions that need to be concerned. The most common implementation of a SOA service is the SOAP web service, which is supported by several service composition standards and tools such as WS-BPEL, WS-CDL, BPML, ebXML, OWL-S and WSMF, but suffers from SOAP verboseness and text serialization/deserialization overheads. SOAP computational and communicational overheads make SOAP inefficient for service collaborations of mobile devices which have resource constraints and experience connection intermittences. In contrast with the SOAP web service, Thrift service is a computationally efficient binary implementation for SOA services. Thrift services benefit greatly from binary serialization/deserialization, they lack sufficient standards and tools for service composition to achieve business-IT alignment. This study proposes an architecture to provide service composition capabilities for thrift services, so that the architecture enables users to either combine Thrift services as a composite Thrift service and to invoke the resultant Thrift services directly from BPEL or to orchestrate Thrift services and SOAP web services together and to invoke the resultant service in the same way. The initial implementation was promising and is discussed in this paper.},
	urldate = {2021-03-30},
	booktitle = {Proceedings of the international conference on smart cities and internet of things},
	publisher = {Association for Computing Machinery},
	author = {Anvari, Mansoureh and Takht, Mehdi Dehghan and Sefid-Dashti, Behrouz},
	month = sep,
	year = {2018},
	keywords = {BPEL extension, mobile service consumption, Thrift service composition},
	pages = {1--5},
	file = {Anvari et al. - 2018 - Thrift Service Composition Toward Extending BPEL.pdf:/home/ericson/Zotero/storage/I3P2J5C9/Anvari et al. - 2018 - Thrift Service Composition Toward Extending BPEL.pdf:application/pdf},
}

@article{slee_thrift_nodate,
	title = {Thrift: {Scalable} {Cross}-{Language} {Services} {Implementation}},
	abstract = {Thrift is a software library and set of code-generation tools developed at Facebook to expedite development and implementation of efÔ¨Åcient and scalable backend services. Its primary goal is to enable efÔ¨Åcient and reliable communication across programming languages by abstracting the portions of each language that tend to require the most customization into a common library that is implemented in each language. SpeciÔ¨Åcally, Thrift allows developers to deÔ¨Åne datatypes and service interfaces in a single language-neutral Ô¨Åle and generate all the necessary code to build RPC clients and servers.},
	language = {en},
	author = {Slee, Mark and Agarwal, Aditya and Kwiatkowski, Marc},
	pages = {8},
	year = {2007},
	file = {Slee et al. - Thrift Scalable Cross-Language Services Implement.pdf:/home/ericson/Zotero/storage/YI6RP6VZ/Slee et al. - Thrift Scalable Cross-Language Services Implement.pdf:application/pdf},
}

@inproceedings{maeda_performance_2012,
	title = {Performance evaluation of object serialization libraries in {XML}, {JSON} and binary formats},
	doi = {10.1109/DICTAP.2012.6215346},
	abstract = {This paper compares twelve libraries of object serialization from qualitative and quantitative aspects. Those are object serialization in XML, JSON and binary formats. Using each library, a common example is serialized to a file. The size of the serialized file and the processing time are measured during the execution to compare all object serialization libraries. Some libraries show the performance penalty. But it is clear that there is no best solution. Each library makes good in the context it was developed.},
	booktitle = {2012 {Second} {International} {Conference} on {Digital} {Information} and {Communication} {Technology} and it's {Applications} ({DICTAP})},
	author = {Maeda, K.},
	month = may,
	year = {2012},
	keywords = {Java, Computers, JSON, Libraries, object serialization, performance evaluation, Protocols, Standards, XML},
	pages = {177--182},
	file = {Maeda - 2012 - Performance evaluation of object serialization lib.pdf:/home/ericson/Zotero/storage/V4M4SMCG/Maeda - 2012 - Performance evaluation of object serialization lib.pdf:application/pdf},
}

@inproceedings{sumaray_comparison_2012,
	address = {New York, NY, USA},
	series = {{ICUIMC} '12},
	title = {A comparison of data serialization formats for optimal efficiency on a mobile platform},
	isbn = {978-1-4503-1172-4},
	url = {https://doi.org/10.1145/2184751.2184810},
	doi = {10.1145/2184751.2184810},
	abstract = {Because of the increase in easily obtainable internet-connected mobile devices and their unique characteristics, choosing the proper data serialization format has become increasingly difficult. These devices are resource scarce and bandwidth limited. In this paper, we compare four different data serialization formats with an emphasis on serialization speed, data size, and usability. The selected serialization formats include XML, JSON, Thrift, and ProtoBuf. XML and JSON are the most well known text-based data formats, while ProtoBuf and Thrift are relatively new binary serialization formats. These data serialization formats are tested on an Android device using both text-heavy and number-heavy objects.},
	urldate = {2021-03-30},
	booktitle = {Proceedings of the 6th {International} {Conference} on {Ubiquitous} {Information} {Management} and {Communication}},
	publisher = {Association for Computing Machinery},
	author = {Sumaray, Audie and Makki, S. Kami},
	month = feb,
	year = {2012},
	keywords = {JSON, XML, Android, Dalvik, data serialization, ProtoBuf, thrift},
	pages = {1--6},
	file = {Sumaray and Makki - 2012 - A comparison of data serialization formats for opt.pdf:/home/ericson/Zotero/storage/99NI89WY/Sumaray and Makki - 2012 - A comparison of data serialization formats for opt.pdf:application/pdf},
}

@techreport{heiland_ctsc_2014,
	type = {techreport},
	title = {{CTSC} {Recommended} {Security} {Practices} for {Thrift} {Clients}: {Case} {Study}-{Evernote}},
	author = {Heiland, Randy and Marru, Suresh and Pierce, Marlon and Welch, Von},
	year = {2014},
	file = {Heiland et al. - 2014 - CTSC Recommended Security Practices for Thrift Cli.pdf:/home/ericson/Zotero/storage/9UD3E2ZH/Heiland et al. - 2014 - CTSC Recommended Security Practices for Thrift Cli.pdf:application/pdf},
}

@inproceedings{langley_quic_2017,
	title = {The quic transport protocol: {Design} and internet-scale deployment},
	url = {https://dl.acm.org/doi/abs/10.1145/3098822.3098842},
	doi = {10.1145/3098822.3098842},
	urldate = {2021-05-26},
	booktitle = {Proceedings of the conference of the {ACM} special interest group on data communication},
	author = {Langley, Adam and Riddoch, Alistair and Wilk, Alyssa and Vicente, Antonio and Krasic, Charles and Zhang, Dan and Yang, Fan and Kouranov, Fedor and Swett, Ian and Iyengar, Janardhan and others},
	year = {2017},
	pages = {183--196},
	file = {The QUIC Transport Protocol | Proceedings of the Conference of the ACM Special Interest Group on Data Communication:/home/ericson/Zotero/storage/HEYVHQ4J/3098822.html:text/html;Langley, Adam and Riddoch, Alistair and Wilk, Alyssa and Vicente, Antonio and Krasic, Charles and Zhang, Dan and Yang, Fan and Kouranov, Fedor and Swett, Ian and Iyengar, Janardhan and others - 2017 - The quic transport protocol Design and internet-s.pdf:/home/ericson/Zotero/storage/989SLAWP/Langley, Adam and Riddoch, Alistair and Wilk, Alyssa and Vicente, Antonio and Krasic, Charles and Zhang, Dan and Yang, Fan and Kouranov, Fedor and Swett, Ian and Iyengar, Janardhan and others - 2017 - The qui.pdf:application/pdf},
}

@inproceedings{cook_quic_2017,
	title = {{QUIC}: {Better} for what and for whom?},
	shorttitle = {{QUIC}},
	doi = {10.1109/ICC.2017.7997281},
	abstract = {Many applications nowadays use HTTP. HTTP/2, standardised in February 2015, is an improvment of HTTP/1.1. However it is still running on top of TCP/TLS and can thus suffer from performance issues, such as the number of RTTs for the handshake phase and the Head of Line blocking. Google proposed the QUIC (Quick UDP Internet Connection) protocol, an user level protocol, running on top of UDP, to solve those issues. Google argues that the response time (Page Load Time) is shorter and thus the end-user experience better. First papers evaluated the intrinsic performances of QUIC, but none compared QUIC with the network, the website structure and the involved actors in mind. In this paper, we present the results of our evaluation, performed on a local testbed as well as on Internet, and our analysis to identify in which conditions QUIC is of interest, which actors can benefit from having QUIC deployed in the network and what impacts QUIC can lead to.},
	booktitle = {2017 {IEEE} {International} {Conference} on {Communications} ({ICC})},
	author = {Cook, Sarah and Mathieu, Bertrand and Truong, Patrick and Hamchaoui, Isabelle},
	month = may,
	year = {2017},
	note = {ISSN: 1938-1883},
	keywords = {Google, Servers, Protocols, Delays, Internet, Loss measurement, YouTube},
	pages = {1--6},
	file = {IEEE Xplore Abstract Record:/home/ericson/Zotero/storage/4BNZ43RN/7997281.html:text/html},
}

@misc{google_protobuffers_2008,
	title = {Protobuffers},
	url = {https://developers.google.com/protocol-buffers},
	urldate = {2021-05-26},
	author = {Google},
	year = {2008},
	note = {(Acessado em: 26/05/2021)},
}

@book{nelson_remote_1981,
	title = {Remote procedure call},
	publisher = {Carnegie Mellon University},
	author = {NELSON, BRUCE JAY},
	year = {1981},
}


@inproceedings{de_saxce_is_2015,
	title = {Is {HTTP}/2 really faster than {HTTP}/1.1?},
	doi = {10.1109/INFCOMW.2015.7179400},
	abstract = {HTTP/2 is the next generation of the HTTP protocol, and as such, it is supposed to solve past issues and to bring improved performances. Through thorough experiments, we try to bring reliable figures on this new version of the protocol. To do this, we adopt a methodological approach, taking newly introduced features into consideration: compression, multiplexing, server push and priority. Previous studies have shown the SPDY protocol to behave worse than HTTP on cellular networks. Similarly, in this paper, we highlight that HTTP/2 is negatively impacted by packet loss which is characteristic of cellular networks. We also experimented on server push and priority to understand their behavior. Because these mechanisms leave a lot of freedom to implementers, they have high potential; and right now they are under-exploited. Overall, we get practical information on how much one can gain by switching their services to HTTP/2.},
	booktitle = {2015 {IEEE} {Conference} on {Computer} {Communications} {Workshops} ({INFOCOM} {WKSHPS})},
	author = {de Saxc√©, Hugues and Oprescu, Iuniana and Chen, Yiping},
	month = apr,
	year = {2015},
	keywords = {Internet, Multiplexing, Packet loss, Protocols, Servers, Web pages},
	pages = {293--299},
	file = {IEEE Xplore Abstract Record:/home/ericson/Zotero/storage/QVPRXNAK/7179400.html:text/html},
}

@misc{fatemian_why_2020,
	title = {Why load balancing {gRPC} is tricky?},
	url = {https://majidfn.com/blog/20201222-grpc-load-balancing/},
	abstract = {gRPC is commonly used for microservices communication due to its performance, low latency and serialization capabilities. But gRPC connections are sticky. In fact they are too sticky that make the load balancing very tricky and difficult. It is important to understand why and what is a proper way to handle it to avoid services overloading and interruption.},
	language = {en-us},
	urldate = {2021-06-14},
	author = {Fatemian, Majid},
	month = dec,
	year = {2020},
	file = {Snapshot:/home/ericson/Zotero/storage/XNMJ4HAJ/20201222-grpc-load-balancing.html:text/html},
}


@incollection{lynn_addressing_2018,
	address = {Cham},
	title = {Addressing the complexity of {HPC} in the cloud: {Emergence}, self-organisation, self-management, and the separation of concerns},
	isbn = {978-3-319-76037-7 978-3-319-76038-4},
	url = {http://link.springer.com/10.1007/978-3-319-76038-4},
	language = {en},
	urldate = {2021-06-15},
	booktitle = {Heterogeneity, {High} {Performance} {Computing}, {Self}-{Organization} and the {Cloud}},
	publisher = {Palgrave Macmillan, Cham},
	editor = {Lynn, Theo},
	year = {2018},
	doi = {10.1007/978-3-319-76038-4},
	pages = {1--30},
	file = {Lynn et al. - 2018 - Heterogeneity, High Performance Computing, Self-Or.pdf:/home/ericson/Zotero/storage/JCHVYBZT/Lynn et al. - 2018 - Heterogeneity, High Performance Computing, Self-Or.pdf:application/pdf},
}


@incollection{newmarch_data_2017,
	address = {Berkeley, CA},
	title = {Data {Serialization}},
	isbn = {978-1-4842-2692-6},
	url = {https://doi.org/10.1007/978-1-4842-2692-6_4},
	abstract = {A client and server need to exchange information via messages. TCP and UDP provide the transport mechanisms to do this. The two processes also need to have a protocol in place so that message exchange can take place meaningfully.},
	language = {en},
	urldate = {2021-06-15},
	booktitle = {Network {Programming} with {Go}: {Essential} {Skills} for {Using} and {Securing} {Networks}},
	publisher = {Apress},
	author = {Newmarch, Jan},
	editor = {Newmarch, Jan},
	year = {2017},
	doi = {10.1007/978-1-4842-2692-6_4},
	keywords = {JavaScript Object Notation (JSON), Package Main Import, Protocol Buffers, Structure Type Name, Syntax Notation},
	pages = {57--86},
}


@inproceedings{ford_using_1995,
	address = {New York, NY, USA},
	series = {{SOSP} '95},
	title = {Using annotated interface definitions to optimize {RPC}},
	isbn = {978-0-89791-715-5},
	url = {https://doi.org/10.1145/224056.225833},
	doi = {10.1145/224056.225833},
	urldate = {2021-06-14},
	booktitle = {Proceedings of the fifteenth {ACM} symposium on {Operating} systems principles},
	publisher = {Association for Computing Machinery},
	author = {Ford, Bryan and Hibler, Mike and Lepreau, Jay},
	month = dec,
	year = {1995},
	pages = {232},
}


@inproceedings{zaytsev_parsing_2014,
	address = {Cham},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Parsing in a {Broad} {Sense}},
	isbn = {978-3-319-11653-2},
	doi = {10.1007/978-3-319-11653-2_4},
	abstract = {Having multiple representations of the same instance is common in software language engineering: models can be visualised as graphs, edited as text, serialised as XML. When mappings between such representations are considered, terms ‚Äúparsing‚Äù and ‚Äúunparsing‚Äù are often used with incompatible meanings and varying sets of underlying assumptions. We investigate 12 classes of artefacts found in software language processing, present a case study demonstrating their implementations and state-of-the-art mappings among them, and systematically explore the technical research space of bidirectional mappings to build on top of the existing body of work and discover as of yet unused relationships.},
	language = {en},
	booktitle = {Model-{Driven} {Engineering} {Languages} and {Systems}},
	publisher = {Springer International Publishing},
	author = {Zaytsev, Vadim and Bagge, Anya Helene},
	editor = {Dingel, Juergen and Schulte, Wolfram and Ramos, Isidro and Abrah√£o, Silvia and Insfran, Emilio},
	year = {2014},
	keywords = {bidirectional model transformation, model synchronisation, Parsing, pretty-printing, technical space bridging, unparsing},
	pages = {50--67},
	file = {Accepted Version:/home/ericson/Zotero/storage/BXNJPGSU/Zaytsev and Bagge - 2014 - Parsing in a Broad Sense.pdf:application/pdf},
}

@article{ord_neuman_scale_1994,
	title = {Scale in {Distributed} {Systems}},
	journal = {ISI/USC},
	author = {ord Neuman, B Cli},
	year = {1994},
	pages = {68},
	file = {scale-dist-sys-neuman-readings-dcs-1994.pdf:/home/ericson/Zotero/storage/F6A64WC4/scale-dist-sys-neuman-readings-dcs-1994.pdf:application/pdf},
}

@misc{rfc5681,
	series =	{Request for Comments},
	number =	5681,
	howpublished =	{RFC 5681},
	publisher =	{RFC Editor},
	doi =		{10.17487/RFC5681},
	url =		{https://rfc-editor.org/rfc/rfc5681.txt},
        author =	{Ethan Blanton and Dr. Vern Paxson and Mark Allman},
	title =		{{TCP Congestion Control}},
	pagetotal =	18,
	year =		2009,
	month =		sep,
	abstract =	{This document defines TCP's four intertwined congestion control algorithms: slow start, congestion avoidance, fast retransmit, and fast recovery. In addition, the document specifies how TCP should begin transmission after a relatively long idle period, as well as discussing various acknowledgment generation methods. This document obsoletes RFC 2581. {[}STANDARDS-TRACK{]}},
}


@article{cerf_protocol_1974,
	title = {A {Protocol} for {Packet} {Network} {Intercommunication}},
	volume = {22},
	issn = {1558-0857},
	doi = {10.1109/TCOM.1974.1092259},
	abstract = {A protocol that supports the sharing of resources that exist in different packet switching networks is presented. The protocol provides for variation in individual network packet sizes, transmission failures, sequencing, flow control, end-to-end error checking, and the creation and destruction of logical process-to-process connections. Some implementation issues are considered, and problems such as internetwork routing, accounting, and timeouts are exposed.},
	number = {5},
	journal = {IEEE Transactions on Communications},
	author = {Cerf, V. and Kahn, R.},
	month = may,
	year = {1974},
	note = {Conference Name: IEEE Transactions on Communications},
	keywords = {Communication networks, Communication switching, Computer networks, Error correction, Internet, Packet switching, Protocols, Routing, Size control, Switches},
	pages = {637--648},
	file = {IEEE Xplore Abstract Record:/home/ericson/Zotero/storage/6ULBF6MT/1092259.html:text/html;Submitted Version:/home/ericson/Zotero/storage/H28CEP32/Cerf and Kahn - 1974 - A Protocol for Packet Network Intercommunication.pdf:application/pdf},
}

@article{gu2007udt,
  title={UDT: UDP-based data transfer for high-speed wide area networks},
  author={Gu, Yunhong and Grossman, Robert L},
  journal={Computer Networks},
  volume={51},
  number={7},
  pages={1777--1799},
  year={2007},
  publisher={Elsevier}
}

@article{lakshman1997performance,
  title={The performance of TCP/IP for networks with high bandwidth-delay products and random loss},
  author={Lakshman, TV and Madhow, Upamanyu},
  journal={IEEE/ACM transactions on networking},
  volume={5},
  number={3},
  pages={336--350},
  year={1997},
  publisher={IEEE}
}

@misc{rfc5246,
	series =	{Request for Comments},
	number =	5246,
	howpublished =	{RFC 5246},
	publisher =	{RFC Editor},
	doi =		{10.17487/RFC5246},
	url =		{https://rfc-editor.org/rfc/rfc5246.txt},
        author =	{Eric Rescorla and Tim Dierks},
	title =		{{The Transport Layer Security (TLS) Protocol Version 1.2}},
	pagetotal =	104,
	year =		2008,
	month =		aug,
	abstract =	{This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol. The TLS protocol provides communications security over the Internet. The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery. {[}STANDARDS-TRACK{]}},
}

@inproceedings{scharf2006nxg03,
  title={NXG03-5: Head-of-line Blocking in TCP and SCTP: Analysis and Measurements},
  author={Scharf, Michael and Kiesel, Sebastian},
  booktitle={IEEE Globecom 2006},
  pages={1--5},
  year={2006},
  organization={IEEE}
}

@article{soumagne2020advancing,
  title={Advancing RPC for Data Services at Exascale.},
  author={Soumagne, Jerome and Carns, Philip H and Ross, Robert B},
  journal={IEEE Data Eng. Bull.},
  volume={43},
  number={1},
  pages={23--34},
  year={2020}
}

@book{postel_user_1980,
	series = {Request for {Comments}},
	title = {User {Datagram} {Protocol}},
	url = {https://rfc-editor.org/rfc/rfc768.txt},
	number = {768},
	publisher = {RFC Editor},
	author = {Postel, J},
	month = aug,
	year = {1980},
	doi = {10.17487/RFC0768},
	note = {Published: RFC 768},
}

@inproceedings{bergstrom2007anycast,
  title={Anycast-RPC for wireless sensor networks},
  author={Bergstrom, Eric and Pandey, Raju},
  booktitle={2007 IEEE International Conference on Mobile Adhoc and Sensor Systems},
  pages={1--8},
  year={2007},
  organization={IEEE}
}

@article{birrell1984implementing,
  title={Implementing remote procedure calls},
  author={Birrell, Andrew D and Nelson, Bruce Jay},
  journal={ACM Transactions on Computer Systems (TOCS)},
  volume={2},
  number={1},
  pages={39--59},
  year={1984},
  publisher={ACM New York, NY, USA}
}


@misc{google_grpc_2015,
	title = {{gRPC}},
	url = {https://grpc.io/},
	abstract = {A high-performance, open source universal RPC framework},
	language = {en},
	urldate = {2021-06-30},
	journal = {gRPC},
	file = {Snapshot:/home/ericson/Zotero/storage/EWUVEEXL/grpc.io.html:text/html},
	note = {(Acessado em: 26/05/2021)},
	year = {2015}
}

@inproceedings{wang2017experimental,
  title={An experimental study of bitmap compression vs. inverted list compression},
  author={Wang, Jianguo and Lin, Chunbin and Papakonstantinou, Yannis and Swanson, Steven},
  booktitle={Proceedings of the 2017 ACM International Conference on Management of Data},
  pages={993--1008},
  year={2017}
}

@article{noauthor_ieee_2019,
	title = {{IEEE} {Standard} for {Floating}-{Point} {Arithmetic}},
	doi = {10.1109/IEEESTD.2019.8766229},
	journal = {IEEE Std 754-2019 (Revision of IEEE 754-2008)},
	year = {2019},
	pages = {1--84},
}

@misc{noauthor_unicode_2010,
	title = {Unicode 6.0.0},
	url = {https://www.unicode.org/versions/Unicode6.0.0/},
	urldate = {2021-07-01},
	file = {Unicode 6.0.0:/home/ericson/Zotero/storage/5XAAIGU7/Unicode6.0.0.html:text/html},
	note = {(Acessado em: 26/05/2021)},
	year = {2010},
}

@misc{golang_time_2021,
	title = {time - {The} {Go} {Programming} {Language}},
	url = {https://golang.org/pkg/time/#Time},
	urldate = {2021-07-02},
	file = {time - The Go Programming Language:/home/ericson/Zotero/storage/XQK2DW4K/time.html:text/html},
	note = {(Acessado em: 26/05/2021)},
	year = {2021},
}

@misc{golang_golanggo_2021,
	title = {golang/go},
	url = {https://github.com/golang/go/blob/03761ede028d811dd7d7cf8a2690d4bfa2771d85/src/runtime/time_linux_amd64.s},
	abstract = {The Go programming language},
	urldate = {2021-07-02},
	publisher = {Go},
	year = {2021},
	note = {(Acessado em: 26/05/2021)},
}

@misc{linux_clock_getres2_2021,
	title = {clock\_gettime(2) - {Linux} manual page},
	url = {https://man7.org/linux/man-pages/man2/clock_gettime.2.html},
	urldate = {2021-07-02},
	publisher = {Linux Man Pages},
	file = {clock_getres(2) - Linux manual page:/home/ericson/Zotero/storage/8UNNQB7I/clock_gettime.2.html:text/html},
	note = {(Acessado em: 26/05/2021)},
	year = {2021},
}

@inproceedings{rossow2014amplification,
  title={Amplification Hell: Revisiting Network Protocols for DDoS Abuse.},
  author={Rossow, Christian},
  booktitle={NDSS},
  year={2014}
}


@misc{cardwell_networkingnetem_2021,
	title = {networking:netem [{Wiki}]},
	url = {https://wiki.linuxfoundation.org/networking/netem},
	urldate = {2021-07-03},
	author = {Cardwell, Neal},
	file = {networking\:netem [Wiki]:/home/ericson/Zotero/storage/A4RWH6AR/netem.html:text/html},
	note = {(Acessado em: 26/05/2021)},
	year = {2021},
}

@misc{rfc7540,
	series =	{Request for Comments},
	number =	7540,
	howpublished =	{RFC 7540},
	publisher =	{RFC Editor},
	doi =		{10.17487/RFC7540},
	url =		{https://rfc-editor.org/rfc/rfc7540.txt},
        author =	{Mike Belshe and Roberto Peon and Martin Thomson},
	title =		{{Hypertext Transfer Protocol Version 2 (HTTP/2)}},
	pagetotal =	96,
	year =		2015,
	month =		may,
	abstract =	{This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2). HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection. It also introduces unsolicited push of representations from servers to clients. This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax. HTTP's existing semantics remain unchanged.},
}

@techreport{ietf-quic-http-34,
	number =	{draft-ietf-quic-http-34},
	type =		{Internet-Draft},
	institution =	{Internet Engineering Task Force},
	publisher =	{Internet Engineering Task Force},
	note =		{Work in Progress},
	url =		{https://datatracker.ietf.org/doc/html/draft-ietf-quic-http-34},
        author =	{Mike Bishop},
	title =		{{Hypertext Transfer Protocol Version 3 (HTTP/3)}},
	pagetotal =	75,
	year =		2021,
	month =		feb,
	day =		2,
	abstract =	{The QUIC transport protocol has several features that are desirable in a transport for HTTP, such as stream multiplexing, per-stream flow control, and low-latency connection establishment. This document describes a mapping of HTTP semantics over QUIC. This document also identifies HTTP/2 features that are subsumed by QUIC, and describes how HTTP/2 extensions can be ported to HTTP/3. DO NOT DEPLOY THIS VERSION OF HTTP DO NOT DEPLOY THIS VERSION OF HTTP/3 UNTIL IT IS IN AN RFC. This version is still a work in progress. For trial deployments, please use earlier versions. Note to Readers Discussion of this draft takes place on the QUIC working group mailing list (quic@ietf.org), which is archived at https://mailarchive.ietf.org/arch/search/?email\_list=quic. Working Group information can be found at https://github.com/quicwg; source code and issues list for this draft can be found at https://github.com/quicwg/base-drafts/labels/-http.},
}
